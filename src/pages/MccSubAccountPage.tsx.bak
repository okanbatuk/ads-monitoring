import React, { useState, useMemo } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { FiArrowLeft, FiRefreshCw, FiPlus, FiArrowUpRight, FiArrowDownRight } from 'react-icons/fi';
import { format, subDays } from 'date-fns';
import {
  useAccount,
  useAccountScores,
  useAccountCampaigns
} from '../services/api';
import type {
  AccountDto,
  CampaignDto,
  AccountScoreDto,
  GetAccountResponse,
  GetAccountScoresResponse,
  GetAccountCampaignsResponse
} from '../types/api.types';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine } from 'recharts';

// Time range options for the QS trend chart
const TIME_RANGES = [
  { days: 7, label: '7d' },
  { days: 30, label: '30d' },
  { days: 90, label: '90d' },
  { days: 365, label: '1y' },
] as const;

// Simple loading skeleton component
const LoadingSkeleton = ({ className = '', count = 1 }: { className?: string; count?: number }) => (
  <>
    {Array.from({ length: count }).map((_, i) => (
      <div key={i} className={`animate-pulse bg-gray-200 rounded ${className}`} />
    ))}
  </>
);

const QS_COLORS = {
  '1-3': '#ef4444',    // Red
  '4-6': '#f59e0b',    // Amber
  '7-8': '#10b981',    // Emerald
  '9-10': '#3b82f6',   // Blue
};

const getColorForScore = (score: number) => {
  if (score >= 9) return QS_COLORS['9-10'];
  if (score >= 7) return QS_COLORS['7-8'];
  if (score >= 4) return QS_COLORS['4-6'];
  return QS_COLORS['1-3'];
};

// Status badge component
const StatusBadge = ({ status }: { status: string }) => {
  const statusColors = {
    ENABLED: 'bg-green-100 text-green-800',
    PAUSED: 'bg-yellow-100 text-yellow-800',
    REMOVED: 'bg-red-100 text-red-800',
    UNKNOWN: 'bg-gray-100 text-gray-800',
  } as const;

  const statusText = {
    ENABLED: 'Active',
    PAUSED: 'Paused',
    REMOVED: 'Removed',
    UNKNOWN: 'Unknown',
  } as const;

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${statusColors[status as keyof typeof statusColors] || statusColors.UNKNOWN
        }`}
    >
      {statusText[status as keyof typeof statusText] || status}
    </span>
  );
};

// QS Badge component
const QSBadge = ({ qs }: { qs: number }) => {
  const getQSColor = (score: number) => {
    if (score >= 7) return 'bg-green-100 text-green-800';
    if (score >= 4) return 'bg-yellow-100 text-yellow-800';
    return 'bg-red-100 text-red-800';
  };

  return (
    <span
      className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getQSColor(qs)}`}
    >
      {qs.toFixed(1)}
    </span>
  );
};

// Quality Score Chart Component
interface QualityScoreChartProps {
  scores: Score[];
  timeRange: number;
}

const QualityScoreChart: React.FC<QualityScoreChartProps> = ({ scores = [], timeRange = 7 }) => {
  // Generate chart data for the selected time range, even if no scores
  const chartData = useMemo(() => {
    const today = new Date();
    const days = timeRange;
    const dateArray = Array.from({ length: days }, (_, i) => {
      const date = subDays(today, days - i - 1);
      return {
        date: format(date, 'dd.MM.yyyy'),
        qs: 0, // Default to 0
        displayDate: format(date, 'dd MMM')
      };
    });

    // If we have scores, update the data points
    if (scores && scores.length > 0) {
      scores.forEach(score => {
        const date = score.date;
        const dataPoint = dateArray.find(d => d.date === date);
        if (dataPoint) {
          dataPoint.qs = score.qs || 0;
        }
      });
    }

    return dateArray;
  }, [scores, timeRange]);

  return (
    <div className="bg-white rounded-lg shadow p-6">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold text-gray-900">Quality Score Trend</h2>
        <div className="flex space-x-2">
          {TIME_RANGES.map(({ days, label }) => (
            <button
              key={days}
              onClick={() => { }}
              className={`px-3 py-1 text-sm rounded-md ${timeRange === days ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-100'
                }`}
            >
              {label}
            </button>
          ))}
        </div>
      </div>
      <div className="h-64">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={chartData}>
            <CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#f3f4f6" />
            <XAxis
              dataKey="displayDate"
              axisLine={false}
              tickLine={false}
              tick={{ fontSize: 12, fill: '#6b7280' }}
              tickMargin={10}
            />
            <YAxis
              domain={[0, 10]}
              axisLine={false}
              tickLine={false}
              tick={{ fontSize: 12, fill: '#6b7280' }}
              width={30}
              tickCount={6}
            />
            <Tooltip
              content={({ active, payload }) => {
                if (active && payload && payload.length) {
                  return (
                    <div className="bg-white p-3 border border-gray-200 rounded shadow-lg">
                      <p className="font-medium">{payload[0].payload.date}</p>
                      <p className="text-sm">
                        <span className="text-gray-600">Quality Score:</span>{' '}
                        <span className="font-semibold">{payload[0].value?.toFixed(1)}</span>
                      </p>
                    </div>
                  );
                }
                return null;
              }}
            />
            <ReferenceLine y={7} stroke="#10b981" strokeDasharray="3 3" />
            <ReferenceLine y={4} stroke="#f59e0b" strokeDasharray="3 3" />
            <Line
              type="monotone"
              dataKey="qs"
              stroke="#3b82f6"
              strokeWidth={2}
              dot={false}
              activeDot={{
                r: 6,
                fill: '#3b82f6',
                stroke: '#fff',
                strokeWidth: 2
              }}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Button Component
const Button: React.FC<{
  children: React.ReactNode;
  onClick?: () => void;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  fullWidth?: boolean;
}> = ({
  children,
  onClick,
  variant = 'primary',
  size = 'md',
  className = '',
  disabled = false,
  type = 'button',
  leftIcon,
  rightIcon,
  fullWidth = false,
}) => {
    const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none';

    const variantStyles = {
      primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
      secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-400',
      outline: 'bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-blue-500',
      ghost: 'bg-transparent text-gray-700 hover:bg-gray-100 focus:ring-blue-500',
    } as const;

    const sizeMapping = {
      sm: 'px-3 py-1.5 text-xs',
      md: 'px-4 py-2 text-sm',
      lg: 'px-6 py-3 text-base',
      small: 'px-3 py-1.5 text-xs',
      medium: 'px-4 py-2 text-sm',
      large: 'px-6 py-3 text-base',
    } as const;

    const sizeClass = sizeMapping[size] || sizeMapping.medium;
    const variantClass = variantStyles[variant] || variantStyles.primary;

    return (
      <button
        type={type}
        className={`${baseStyles} ${variantClass} ${sizeClass} ${fullWidth ? 'w-full' : ''
          } ${className}`}
        onClick={onClick}
        disabled={disabled}
      >
        {leftIcon && <span className="mr-2">{leftIcon}</span>}
        {children}
        {rightIcon && <span className="ml-2">{rightIcon}</span>}
      </button>
    );
  };

// Main container component
const Container = ({
  children,
  className = '',
  size = 'xl',
}: {
  children: React.ReactNode;
  className?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}) => {
  const maxWidth = {
    sm: 'max-w-3xl',
    md: 'max-w-4xl',
    lg: 'max-w-6xl',
    xl: 'max-w-7xl',
  }[size];

  return (
    <div className={`mx-auto px-4 sm:px-6 lg:px-8 ${maxWidth} ${className}`}>
      {children}
    </div>
  );
};

interface Score {
  qs: number;
  date: string;
  // Add other score properties as needed
}

interface CampaignDto {
  id: string;
  name: string;
  status: string;
  accountId: string;
  scores?: Score[];
  // Add other campaign properties as needed
}

interface MccSubAccountPageProps {}

interface ApiResponse<T> {
  success: boolean;
  statusCode: number;
  data: T;
  message: string;
  timestamp: string;
}

interface AccountResponse {
  id: string;
  accountId: string;
  name: string;
  status: string;
}

interface CampaignResponse {
  id: string;
  name: string;
  status: string;
  accountId?: string;
  scores?: Score[];
}

interface CampaignsResponse {
  campaigns: CampaignResponse[];
  total: number;
}

interface ScoresResponse {
      ]);
    } catch (error) {
      console.error('Error refreshing data:', error);
    } finally {
      setIsRefreshing(false);
    }
  };

  // Handle time range change
  const handleTimeRangeChange = (days: number) => {
    setTimeRange(days);
    refetchScores();
  };

  // Get account data
  const {
    data: accountResponse,
    isLoading: isLoadingAccount,
    isError: isErrorAccount,
    error: accountError,
    refetch: refetchAccount
  } = useAccount(subAccountId || '');

  // Get account scores
  const {
    data: scoresResponse,
    isLoading: isLoadingScores,
    isError: isErrorScores,
    error: scoresError,
    refetch: refetchScores
  } = useAccountScores(subAccountId || '', timeRange);

  // Get campaigns for the account
  const {
    data: campaignsResponse,
    isLoading: isLoadingCampaigns,
    isError: isErrorCampaigns,
    error: campaignsError,
    refetch: refetchCampaigns
  } = useAccountCampaigns(subAccountId || '');

  // Get the account data from the response with proper typing
  const account = useMemo(() => {
    return (accountResponse as ApiResponse<AccountResponse> | undefined)?.data;
  }, [accountResponse]);
  
  // Get scores from the response, default to empty array if not available
  const scores = useMemo(() => {
    return (scoresResponse as ApiResponse<ScoresResponse> | undefined)?.data?.scores || [];
  }, [scoresResponse]);

  // Process campaigns data with proper typing and default values
  const { campaigns, campaignCount } = useMemo(() => {
    const response = campaignsResponse as ApiResponse<CampaignsResponse> | undefined;
    const campaignsData = response?.data?.campaigns || [];
    const count = response?.data?.total || 0;
    
    const processedCampaigns = campaignsData.map((campaign: CampaignResponse) => ({
      ...campaign,
      accountId: campaign.accountId || subAccountId || '',
      scores: Array.isArray(campaign.scores) ? campaign.scores : []
    }));
    
    return { campaigns: processedCampaigns, campaignCount: count };
  }, [campaignsResponse, subAccountId]);

  // Calculate average QS for the account
  const avgQs = useMemo(() => {
    if (!scores?.length) return 0;
    const validScores = scores.filter((score) => score.qs > 0);
    if (!validScores.length) return 0;
    const sum = validScores.reduce((acc, score) => acc + score.qs, 0);
    return sum / validScores.length;
  }, [scores]);

  // Get last 5 campaigns for the overview with their scores
  const recentCampaigns = useMemo(() => {
    return campaigns.slice(0, 5).map((campaign) => ({
      ...campaign,
      scores: Array.isArray(campaign.scores) ? campaign.scores : []
    }));
  }, [campaigns]);

  // Handle refresh
  const handleRefresh = async () => {
    try {
      setIsRefreshing(true);
      await Promise.all([
        refetchAccount(),
        refetchScores(),
        refetchCampaigns()
      ]);
    } catch (error) {
      console.error('Error refreshing data:', error);
    } finally {
      setIsRefreshing(false);
    }
  };

  // Handle time range change
  const handleTimeRangeChange = (days: number) => {

// Get last 5 campaigns for the overview with their scores
const recentCampaigns = useMemo(() => {
return campaigns.slice(0, 5).map((campaign) => ({
...campaign,
scores: Array.isArray(campaign.scores) ? campaign.scores : []
}));
}, [campaigns]);
      </Container>
    );
  }
  
  // Show error state if any error occurred
  if (isErrorAccount || isErrorScores || isErrorCampaigns) {
    const error = accountError || scoresError || campaignsError;
    return (
      <Container>
        <div className="py-8">
          <div className="bg-red-50 border-l-4 border-red-400 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">
                  Error loading data: {error?.message || 'Unknown error occurred'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </Container>
    );
  }

  // Show error state if any error occurred
  if (isErrorAccount || isErrorScores || isErrorCampaigns) {
    const error = accountError || scoresError || campaignsError;
    return (
      <Container className="py-8">
        <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-8">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">
                Error loading account data: {error?.message || 'Unknown error'}
              </p>
            </div>
          </div>
        </div>
        <button
          onClick={handleRefresh}
          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 flex items-center space-x-2"
        >
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          <span>Retry</span>
        </button>
      </Container>
    );
  }

  // Add explicit return type for the component
  const renderContent = () => (
    <div className="w-full">
      <div className="py-8">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => navigate(-1)}
              className="p-2 text-gray-500 hover:text-gray-700 rounded-full hover:bg-gray-100"
            >
              <FiArrowLeft className="w-5 h-5" />
            </button>
            <h1 className="text-2xl font-bold text-gray-900">
              {account?.name || 'Loading...'}
            </h1>
          </div>
          <div className="flex space-x-3">
            <Button
              onClick={handleRefresh}
              disabled={isRefreshing}
              variant="primary"
              size="md"
              className="flex items-center space-x-2"
              leftIcon={<FiRefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />}
            >
              Refresh
            </Button>
            <Button
              onClick={() => navigate(`/campaigns/new`)}
              variant="primary"
              size="md"
              className="flex items-center space-x-2"
              leftIcon={<FiPlus className="w-4 h-4" />}
            >
              Create Campaign
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2">Account Overview</h2>
            <div className="flex items-center space-x-4">
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-500">Account ID:</p>
                <p className="text-lg font-medium text-gray-900">{account?.id}</p>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-500">Status:</p>
                <StatusBadge status={account?.status || ''} />
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2">Quality Score</h2>
            <div className="flex items-center space-x-4">
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-500">Average QS:</p>
                <div className="flex items-center space-x-2">
                  <QSBadge qs={avgQs} />
                  <span className="text-gray-900">/ 10</span>
                </div>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-500">QS Trend:</p>
                <div className="flex items-center">
                  <span className="text-gray-900 mr-1">
                    {scores.length > 1 && scores[0].qs > scores[scores.length - 1].qs ? '↑' : '↓'}
                  </span>
                  <span className="text-gray-900">
                    {scores.length > 1
                      ? `${Math.abs(scores[0].qs - scores[scores.length - 1].qs).toFixed(1)} `
                      : '0.0 '}
                    (30d)
                  </span>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-lg font-bold text-gray-900 mb-2">Campaigns</h2>
            <div className="flex items-center space-x-4">
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-500">Total Campaigns:</p>
                <p className="text-lg font-medium text-gray-900">{campaignCount}</p>
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm text-gray-500">Active Campaigns:</p>
                <p className="text-lg font-medium text-gray-900">{campaigns.filter(campaign => campaign.status === 'ENABLED').length}</p>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-lg font-bold text-gray-900">Quality Score Trend</h2>
            <div className="flex space-x-2">
              {TIME_RANGES.map(({ days, label }) => (
                <button
                  key={days}
                  onClick={() => handleTimeRangeChange(days)}
                  className={`px-3 py-1 text-sm rounded-md ${timeRange === days ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-100'
                    }`}
                >
                  {label}
                </button>
              ))}
            </div>
          </div>

          <div className="h-64">
            <QualityScoreChart scores={scores} timeRange={timeRange} />
          </div>
        </div>

        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-bold text-gray-900">Recent Campaigns</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Campaign
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Avg. QS
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    QS Trend
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {campaigns && Array.isArray(campaigns) && campaigns.map((campaign: Campaign) => {
                  const scores = campaign.scores || [];
                  const latestScore = scores.length > 0 ? scores[0].qs : 0;
                  const previousScore = scores.length > 1 ? scores[1].qs : latestScore;
                  const trend = latestScore - previousScore;
                  const trendPercentage = previousScore ? (trend / previousScore) * 100 : 0;
                  return (
                    <tr
                      key={campaign.id}
                      className="hover:bg-gray-50 cursor-pointer"
                      onClick={() => navigate(`/campaigns/${campaign.id}`)}
                    >
                      <td className="px-6 py-4 w-1/5 whitespace-nowrap">
                        <div className="flex gap-2 items-center text-sm font-medium text-gray-900">
                          {campaign.name}
                          <StatusBadge status={campaign.status} />
                        </div>
                        <div className="text-xs text-gray-500 p-1">ID: {campaign.id}</div>
                      </td>
                      <td className="px-6 py-4 w-3/5 whitespace-nowrap">
                        <div className="w-full min-w-[200px]">
                          <div className="w-[200px] h-[40px] flex items-center justify-center text-gray-400 text-sm">
                            QS Trend
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 w-1/5 whitespace-nowrap">
                        <div className="flex items-center">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                                  ${latestScore >= 7 ? 'bg-green-100 text-green-800' :
                              latestScore >= 4 ? 'bg-yellow-100 text-yellow-800' :
                                'bg-red-100 text-red-800'}`}>
                            {latestScore.toFixed(1)}
                          </span>
                          {!isNaN(trendPercentage) && trendPercentage !== 0 && (
                            <span className={`ml-2 text-xs ${trend >= 0 ? 'text-green-600' : 'text-red-600'} flex items-center`}>
                              {trend >= 0 ? (
                                <FiArrowUpRight className="mr-0.5" size={14} />
                              ) : (
                                <FiArrowDownRight className="mr-0.5" size={14} />
                              )}
                              {Math.abs(trendPercentage).toFixed(1)}%
                            </span>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
          ) : (
          <div className="text-center py-12 bg-white rounded-lg shadow">
            <p className="text-gray-500">No campaigns found for this account.</p>
          </div>
          )
        </div>
        )
      </div>
    </div>
  );
};

export default MccSubAccountPage;
